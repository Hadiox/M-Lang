Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ADDASSIGN
    BREAK
    CONTINUE
    DIVASSIGN
    DOTADD
    DOTDIV
    DOTMUL
    DOTSUB
    EYE
    FLOAT
    FOR
    MULASSIGN
    NEQ
    ONES
    PRINT
    RETURN
    STRING
    SUBASSIGN
    THEN
    WHILE
    ZEROS

Grammar

Rule 0     S' -> program
Rule 1     program -> instructions_opt
Rule 2     instructions_opt -> instructions
Rule 3     instructions_opt -> <empty>
Rule 4     instructions -> instructions instruction
Rule 5     instructions -> instruction
Rule 6     instruction -> if_statement
Rule 7     if_statement -> IF ( condition ) { instructions } else_statement
Rule 8     if_statement -> IF ( condition ) instruction else_statement
Rule 9     else_statement -> ELSE { instructions }
Rule 10    else_statement -> ELSE instruction
Rule 11    else_statement -> <empty>
Rule 12    condition -> variable logical_operator variable
Rule 13    condition -> condition OR condition
Rule 14    condition -> condition AND condition
Rule 15    logical_operator -> EQ
Rule 16    logical_operator -> <
Rule 17    logical_operator -> >
Rule 18    logical_operator -> GE
Rule 19    logical_operator -> LE
Rule 20    variable -> INTNUM
Rule 21    variable -> ID
Rule 22    instruction -> assign
Rule 23    assign -> ID = INTNUM
Rule 24    assign -> ID = ID
Rule 25    assign -> ID = EXPRESSION
Rule 26    EXPRESSION -> INTNUM + INTNUM

Terminals, with rules where they appear

(                    : 7 8
)                    : 7 8
+                    : 26
<                    : 16
=                    : 23 24 25
>                    : 17
ADDASSIGN            : 
AND                  : 14
BREAK                : 
CONTINUE             : 
DIVASSIGN            : 
DOTADD               : 
DOTDIV               : 
DOTMUL               : 
DOTSUB               : 
ELSE                 : 9 10
EQ                   : 15
EYE                  : 
FLOAT                : 
FOR                  : 
GE                   : 18
ID                   : 21 23 24 24 25
IF                   : 7 8
INTNUM               : 20 23 26 26
LE                   : 19
MULASSIGN            : 
NEQ                  : 
ONES                 : 
OR                   : 13
PRINT                : 
RETURN               : 
STRING               : 
SUBASSIGN            : 
THEN                 : 
WHILE                : 
ZEROS                : 
error                : 
{                    : 7 9
}                    : 7 9

Nonterminals, with rules where they appear

EXPRESSION           : 25
assign               : 22
condition            : 7 8 13 13 14 14
else_statement       : 7 8
if_statement         : 6
instruction          : 4 5 8 10
instructions         : 2 4 7 9
instructions_opt     : 1
logical_operator     : 12
program              : 0
variable             : 12 12

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . instructions_opt
    (2) instructions_opt -> . instructions
    (3) instructions_opt -> .
    (4) instructions -> . instructions instruction
    (5) instructions -> . instruction
    (6) instruction -> . if_statement
    (22) instruction -> . assign
    (7) if_statement -> . IF ( condition ) { instructions } else_statement
    (8) if_statement -> . IF ( condition ) instruction else_statement
    (23) assign -> . ID = INTNUM
    (24) assign -> . ID = ID
    (25) assign -> . ID = EXPRESSION

    $end            reduce using rule 3 (instructions_opt -> .)
    IF              shift and go to state 7
    ID              shift and go to state 8

    program                        shift and go to state 1
    instructions_opt               shift and go to state 2
    instructions                   shift and go to state 3
    instruction                    shift and go to state 4
    if_statement                   shift and go to state 5
    assign                         shift and go to state 6

state 1

    (0) S' -> program .



state 2

    (1) program -> instructions_opt .

    $end            reduce using rule 1 (program -> instructions_opt .)


state 3

    (2) instructions_opt -> instructions .
    (4) instructions -> instructions . instruction
    (6) instruction -> . if_statement
    (22) instruction -> . assign
    (7) if_statement -> . IF ( condition ) { instructions } else_statement
    (8) if_statement -> . IF ( condition ) instruction else_statement
    (23) assign -> . ID = INTNUM
    (24) assign -> . ID = ID
    (25) assign -> . ID = EXPRESSION

    $end            reduce using rule 2 (instructions_opt -> instructions .)
    IF              shift and go to state 7
    ID              shift and go to state 8

    instruction                    shift and go to state 9
    if_statement                   shift and go to state 5
    assign                         shift and go to state 6

state 4

    (5) instructions -> instruction .

    IF              reduce using rule 5 (instructions -> instruction .)
    ID              reduce using rule 5 (instructions -> instruction .)
    $end            reduce using rule 5 (instructions -> instruction .)
    }               reduce using rule 5 (instructions -> instruction .)


state 5

    (6) instruction -> if_statement .

    IF              reduce using rule 6 (instruction -> if_statement .)
    ID              reduce using rule 6 (instruction -> if_statement .)
    $end            reduce using rule 6 (instruction -> if_statement .)
    ELSE            reduce using rule 6 (instruction -> if_statement .)
    }               reduce using rule 6 (instruction -> if_statement .)


state 6

    (22) instruction -> assign .

    IF              reduce using rule 22 (instruction -> assign .)
    ID              reduce using rule 22 (instruction -> assign .)
    $end            reduce using rule 22 (instruction -> assign .)
    ELSE            reduce using rule 22 (instruction -> assign .)
    }               reduce using rule 22 (instruction -> assign .)


state 7

    (7) if_statement -> IF . ( condition ) { instructions } else_statement
    (8) if_statement -> IF . ( condition ) instruction else_statement

    (               shift and go to state 10


state 8

    (23) assign -> ID . = INTNUM
    (24) assign -> ID . = ID
    (25) assign -> ID . = EXPRESSION

    =               shift and go to state 11


state 9

    (4) instructions -> instructions instruction .

    IF              reduce using rule 4 (instructions -> instructions instruction .)
    ID              reduce using rule 4 (instructions -> instructions instruction .)
    $end            reduce using rule 4 (instructions -> instructions instruction .)
    }               reduce using rule 4 (instructions -> instructions instruction .)


state 10

    (7) if_statement -> IF ( . condition ) { instructions } else_statement
    (8) if_statement -> IF ( . condition ) instruction else_statement
    (12) condition -> . variable logical_operator variable
    (13) condition -> . condition OR condition
    (14) condition -> . condition AND condition
    (20) variable -> . INTNUM
    (21) variable -> . ID

    INTNUM          shift and go to state 14
    ID              shift and go to state 15

    condition                      shift and go to state 12
    variable                       shift and go to state 13

state 11

    (23) assign -> ID = . INTNUM
    (24) assign -> ID = . ID
    (25) assign -> ID = . EXPRESSION
    (26) EXPRESSION -> . INTNUM + INTNUM

    INTNUM          shift and go to state 17
    ID              shift and go to state 16

    EXPRESSION                     shift and go to state 18

state 12

    (7) if_statement -> IF ( condition . ) { instructions } else_statement
    (8) if_statement -> IF ( condition . ) instruction else_statement
    (13) condition -> condition . OR condition
    (14) condition -> condition . AND condition

    )               shift and go to state 19
    OR              shift and go to state 20
    AND             shift and go to state 21


state 13

    (12) condition -> variable . logical_operator variable
    (15) logical_operator -> . EQ
    (16) logical_operator -> . <
    (17) logical_operator -> . >
    (18) logical_operator -> . GE
    (19) logical_operator -> . LE

    EQ              shift and go to state 23
    <               shift and go to state 24
    >               shift and go to state 25
    GE              shift and go to state 26
    LE              shift and go to state 27

    logical_operator               shift and go to state 22

state 14

    (20) variable -> INTNUM .

    EQ              reduce using rule 20 (variable -> INTNUM .)
    <               reduce using rule 20 (variable -> INTNUM .)
    >               reduce using rule 20 (variable -> INTNUM .)
    GE              reduce using rule 20 (variable -> INTNUM .)
    LE              reduce using rule 20 (variable -> INTNUM .)
    )               reduce using rule 20 (variable -> INTNUM .)
    OR              reduce using rule 20 (variable -> INTNUM .)
    AND             reduce using rule 20 (variable -> INTNUM .)


state 15

    (21) variable -> ID .

    EQ              reduce using rule 21 (variable -> ID .)
    <               reduce using rule 21 (variable -> ID .)
    >               reduce using rule 21 (variable -> ID .)
    GE              reduce using rule 21 (variable -> ID .)
    LE              reduce using rule 21 (variable -> ID .)
    )               reduce using rule 21 (variable -> ID .)
    OR              reduce using rule 21 (variable -> ID .)
    AND             reduce using rule 21 (variable -> ID .)


state 16

    (24) assign -> ID = ID .

    IF              reduce using rule 24 (assign -> ID = ID .)
    ID              reduce using rule 24 (assign -> ID = ID .)
    $end            reduce using rule 24 (assign -> ID = ID .)
    ELSE            reduce using rule 24 (assign -> ID = ID .)
    }               reduce using rule 24 (assign -> ID = ID .)


state 17

    (23) assign -> ID = INTNUM .
    (26) EXPRESSION -> INTNUM . + INTNUM

    IF              reduce using rule 23 (assign -> ID = INTNUM .)
    ID              reduce using rule 23 (assign -> ID = INTNUM .)
    $end            reduce using rule 23 (assign -> ID = INTNUM .)
    ELSE            reduce using rule 23 (assign -> ID = INTNUM .)
    }               reduce using rule 23 (assign -> ID = INTNUM .)
    +               shift and go to state 28


state 18

    (25) assign -> ID = EXPRESSION .

    IF              reduce using rule 25 (assign -> ID = EXPRESSION .)
    ID              reduce using rule 25 (assign -> ID = EXPRESSION .)
    $end            reduce using rule 25 (assign -> ID = EXPRESSION .)
    ELSE            reduce using rule 25 (assign -> ID = EXPRESSION .)
    }               reduce using rule 25 (assign -> ID = EXPRESSION .)


state 19

    (7) if_statement -> IF ( condition ) . { instructions } else_statement
    (8) if_statement -> IF ( condition ) . instruction else_statement
    (6) instruction -> . if_statement
    (22) instruction -> . assign
    (7) if_statement -> . IF ( condition ) { instructions } else_statement
    (8) if_statement -> . IF ( condition ) instruction else_statement
    (23) assign -> . ID = INTNUM
    (24) assign -> . ID = ID
    (25) assign -> . ID = EXPRESSION

    {               shift and go to state 29
    IF              shift and go to state 7
    ID              shift and go to state 8

    instruction                    shift and go to state 30
    if_statement                   shift and go to state 5
    assign                         shift and go to state 6

state 20

    (13) condition -> condition OR . condition
    (12) condition -> . variable logical_operator variable
    (13) condition -> . condition OR condition
    (14) condition -> . condition AND condition
    (20) variable -> . INTNUM
    (21) variable -> . ID

    INTNUM          shift and go to state 14
    ID              shift and go to state 15

    condition                      shift and go to state 31
    variable                       shift and go to state 13

state 21

    (14) condition -> condition AND . condition
    (12) condition -> . variable logical_operator variable
    (13) condition -> . condition OR condition
    (14) condition -> . condition AND condition
    (20) variable -> . INTNUM
    (21) variable -> . ID

    INTNUM          shift and go to state 14
    ID              shift and go to state 15

    condition                      shift and go to state 32
    variable                       shift and go to state 13

state 22

    (12) condition -> variable logical_operator . variable
    (20) variable -> . INTNUM
    (21) variable -> . ID

    INTNUM          shift and go to state 14
    ID              shift and go to state 15

    variable                       shift and go to state 33

state 23

    (15) logical_operator -> EQ .

    INTNUM          reduce using rule 15 (logical_operator -> EQ .)
    ID              reduce using rule 15 (logical_operator -> EQ .)


state 24

    (16) logical_operator -> < .

    INTNUM          reduce using rule 16 (logical_operator -> < .)
    ID              reduce using rule 16 (logical_operator -> < .)


state 25

    (17) logical_operator -> > .

    INTNUM          reduce using rule 17 (logical_operator -> > .)
    ID              reduce using rule 17 (logical_operator -> > .)


state 26

    (18) logical_operator -> GE .

    INTNUM          reduce using rule 18 (logical_operator -> GE .)
    ID              reduce using rule 18 (logical_operator -> GE .)


state 27

    (19) logical_operator -> LE .

    INTNUM          reduce using rule 19 (logical_operator -> LE .)
    ID              reduce using rule 19 (logical_operator -> LE .)


state 28

    (26) EXPRESSION -> INTNUM + . INTNUM

    INTNUM          shift and go to state 34


state 29

    (7) if_statement -> IF ( condition ) { . instructions } else_statement
    (4) instructions -> . instructions instruction
    (5) instructions -> . instruction
    (6) instruction -> . if_statement
    (22) instruction -> . assign
    (7) if_statement -> . IF ( condition ) { instructions } else_statement
    (8) if_statement -> . IF ( condition ) instruction else_statement
    (23) assign -> . ID = INTNUM
    (24) assign -> . ID = ID
    (25) assign -> . ID = EXPRESSION

    IF              shift and go to state 7
    ID              shift and go to state 8

    instructions                   shift and go to state 35
    instruction                    shift and go to state 4
    if_statement                   shift and go to state 5
    assign                         shift and go to state 6

state 30

    (8) if_statement -> IF ( condition ) instruction . else_statement
    (9) else_statement -> . ELSE { instructions }
    (10) else_statement -> . ELSE instruction
    (11) else_statement -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 37
    IF              reduce using rule 11 (else_statement -> .)
    ID              reduce using rule 11 (else_statement -> .)
    $end            reduce using rule 11 (else_statement -> .)
    }               reduce using rule 11 (else_statement -> .)

  ! ELSE            [ reduce using rule 11 (else_statement -> .) ]

    else_statement                 shift and go to state 36

state 31

    (13) condition -> condition OR condition .
    (13) condition -> condition . OR condition
    (14) condition -> condition . AND condition

  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    )               reduce using rule 13 (condition -> condition OR condition .)
    OR              shift and go to state 20
    AND             shift and go to state 21

  ! OR              [ reduce using rule 13 (condition -> condition OR condition .) ]
  ! AND             [ reduce using rule 13 (condition -> condition OR condition .) ]


state 32

    (14) condition -> condition AND condition .
    (13) condition -> condition . OR condition
    (14) condition -> condition . AND condition

  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    )               reduce using rule 14 (condition -> condition AND condition .)
    OR              shift and go to state 20
    AND             shift and go to state 21

  ! OR              [ reduce using rule 14 (condition -> condition AND condition .) ]
  ! AND             [ reduce using rule 14 (condition -> condition AND condition .) ]


state 33

    (12) condition -> variable logical_operator variable .

    )               reduce using rule 12 (condition -> variable logical_operator variable .)
    OR              reduce using rule 12 (condition -> variable logical_operator variable .)
    AND             reduce using rule 12 (condition -> variable logical_operator variable .)


state 34

    (26) EXPRESSION -> INTNUM + INTNUM .

    IF              reduce using rule 26 (EXPRESSION -> INTNUM + INTNUM .)
    ID              reduce using rule 26 (EXPRESSION -> INTNUM + INTNUM .)
    $end            reduce using rule 26 (EXPRESSION -> INTNUM + INTNUM .)
    ELSE            reduce using rule 26 (EXPRESSION -> INTNUM + INTNUM .)
    }               reduce using rule 26 (EXPRESSION -> INTNUM + INTNUM .)


state 35

    (7) if_statement -> IF ( condition ) { instructions . } else_statement
    (4) instructions -> instructions . instruction
    (6) instruction -> . if_statement
    (22) instruction -> . assign
    (7) if_statement -> . IF ( condition ) { instructions } else_statement
    (8) if_statement -> . IF ( condition ) instruction else_statement
    (23) assign -> . ID = INTNUM
    (24) assign -> . ID = ID
    (25) assign -> . ID = EXPRESSION

    }               shift and go to state 38
    IF              shift and go to state 7
    ID              shift and go to state 8

    instruction                    shift and go to state 9
    if_statement                   shift and go to state 5
    assign                         shift and go to state 6

state 36

    (8) if_statement -> IF ( condition ) instruction else_statement .

    IF              reduce using rule 8 (if_statement -> IF ( condition ) instruction else_statement .)
    ID              reduce using rule 8 (if_statement -> IF ( condition ) instruction else_statement .)
    $end            reduce using rule 8 (if_statement -> IF ( condition ) instruction else_statement .)
    ELSE            reduce using rule 8 (if_statement -> IF ( condition ) instruction else_statement .)
    }               reduce using rule 8 (if_statement -> IF ( condition ) instruction else_statement .)


state 37

    (9) else_statement -> ELSE . { instructions }
    (10) else_statement -> ELSE . instruction
    (6) instruction -> . if_statement
    (22) instruction -> . assign
    (7) if_statement -> . IF ( condition ) { instructions } else_statement
    (8) if_statement -> . IF ( condition ) instruction else_statement
    (23) assign -> . ID = INTNUM
    (24) assign -> . ID = ID
    (25) assign -> . ID = EXPRESSION

    {               shift and go to state 39
    IF              shift and go to state 7
    ID              shift and go to state 8

    instruction                    shift and go to state 40
    if_statement                   shift and go to state 5
    assign                         shift and go to state 6

state 38

    (7) if_statement -> IF ( condition ) { instructions } . else_statement
    (9) else_statement -> . ELSE { instructions }
    (10) else_statement -> . ELSE instruction
    (11) else_statement -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 37
    IF              reduce using rule 11 (else_statement -> .)
    ID              reduce using rule 11 (else_statement -> .)
    $end            reduce using rule 11 (else_statement -> .)
    }               reduce using rule 11 (else_statement -> .)

  ! ELSE            [ reduce using rule 11 (else_statement -> .) ]

    else_statement                 shift and go to state 41

state 39

    (9) else_statement -> ELSE { . instructions }
    (4) instructions -> . instructions instruction
    (5) instructions -> . instruction
    (6) instruction -> . if_statement
    (22) instruction -> . assign
    (7) if_statement -> . IF ( condition ) { instructions } else_statement
    (8) if_statement -> . IF ( condition ) instruction else_statement
    (23) assign -> . ID = INTNUM
    (24) assign -> . ID = ID
    (25) assign -> . ID = EXPRESSION

    IF              shift and go to state 7
    ID              shift and go to state 8

    instructions                   shift and go to state 42
    instruction                    shift and go to state 4
    if_statement                   shift and go to state 5
    assign                         shift and go to state 6

state 40

    (10) else_statement -> ELSE instruction .

    ELSE            reduce using rule 10 (else_statement -> ELSE instruction .)
    IF              reduce using rule 10 (else_statement -> ELSE instruction .)
    ID              reduce using rule 10 (else_statement -> ELSE instruction .)
    $end            reduce using rule 10 (else_statement -> ELSE instruction .)
    }               reduce using rule 10 (else_statement -> ELSE instruction .)


state 41

    (7) if_statement -> IF ( condition ) { instructions } else_statement .

    IF              reduce using rule 7 (if_statement -> IF ( condition ) { instructions } else_statement .)
    ID              reduce using rule 7 (if_statement -> IF ( condition ) { instructions } else_statement .)
    $end            reduce using rule 7 (if_statement -> IF ( condition ) { instructions } else_statement .)
    ELSE            reduce using rule 7 (if_statement -> IF ( condition ) { instructions } else_statement .)
    }               reduce using rule 7 (if_statement -> IF ( condition ) { instructions } else_statement .)


state 42

    (9) else_statement -> ELSE { instructions . }
    (4) instructions -> instructions . instruction
    (6) instruction -> . if_statement
    (22) instruction -> . assign
    (7) if_statement -> . IF ( condition ) { instructions } else_statement
    (8) if_statement -> . IF ( condition ) instruction else_statement
    (23) assign -> . ID = INTNUM
    (24) assign -> . ID = ID
    (25) assign -> . ID = EXPRESSION

    }               shift and go to state 43
    IF              shift and go to state 7
    ID              shift and go to state 8

    instruction                    shift and go to state 9
    if_statement                   shift and go to state 5
    assign                         shift and go to state 6

state 43

    (9) else_statement -> ELSE { instructions } .

    ELSE            reduce using rule 9 (else_statement -> ELSE { instructions } .)
    IF              reduce using rule 9 (else_statement -> ELSE { instructions } .)
    ID              reduce using rule 9 (else_statement -> ELSE { instructions } .)
    $end            reduce using rule 9 (else_statement -> ELSE { instructions } .)
    }               reduce using rule 9 (else_statement -> ELSE { instructions } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 30 resolved as shift
WARNING: shift/reduce conflict for OR in state 31 resolved as shift
WARNING: shift/reduce conflict for AND in state 31 resolved as shift
WARNING: shift/reduce conflict for OR in state 32 resolved as shift
WARNING: shift/reduce conflict for AND in state 32 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 38 resolved as shift
