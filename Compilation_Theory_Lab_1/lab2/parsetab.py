
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "ADDASSIGN BREAK CONTINUE DIVASSIGN DOTADD DOTDIV DOTMUL DOTSUB ELSE EQ EYE FLOAT FOR GE ID IF INTNUM LE MULASSIGN NEQ ONES PRINT RETURN STRING SUBASSIGN THEN WHILE ZEROSprogram : instructions_optinstructions_opt : instructions instructions_opt : instructions : instructions instruction instructions : instruction instruction : if_statementif_statement : IF '(' condition ')' '{' instructions '}'  condition : variable logical_operator variable logical_operator : EQ\n                        | '<'\n                        | '>'\n                        | GE\n                        | LE variable : INTNUM\n                | ID\n  instruction : assign\n  assign : ID '=' INTNUM\n              | ID '=' ID\n              | ID '=' EXPRESSIONEXPRESSION : INTNUM '+' INTNUM"
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,9,16,17,18,29,31,],[-3,0,-1,-2,-5,-6,-16,-4,-18,-17,-19,-20,-7,]),'IF':([0,3,4,5,6,9,16,17,18,27,29,30,31,],[7,7,-5,-6,-16,-4,-18,-17,-19,7,-20,7,-7,]),'ID':([0,3,4,5,6,9,10,11,16,17,18,20,21,22,23,24,25,27,29,30,31,],[8,8,-5,-6,-16,-4,15,16,-18,-17,-19,15,-9,-10,-11,-12,-13,8,-20,8,-7,]),'}':([4,5,6,9,16,17,18,29,30,31,],[-5,-6,-16,-4,-18,-17,-19,-20,31,-7,]),'(':([7,],[10,]),'=':([8,],[11,]),'INTNUM':([10,11,20,21,22,23,24,25,26,],[14,17,14,-9,-10,-11,-12,-13,29,]),')':([12,14,15,28,],[19,-14,-15,-8,]),'EQ':([13,14,15,],[21,-14,-15,]),'<':([13,14,15,],[22,-14,-15,]),'>':([13,14,15,],[23,-14,-15,]),'GE':([13,14,15,],[24,-14,-15,]),'LE':([13,14,15,],[25,-14,-15,]),'+':([17,],[26,]),'{':([19,],[27,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'instructions_opt':([0,],[2,]),'instructions':([0,27,],[3,30,]),'instruction':([0,3,27,30,],[4,9,4,9,]),'if_statement':([0,3,27,30,],[5,5,5,5,]),'assign':([0,3,27,30,],[6,6,6,6,]),'condition':([10,],[12,]),'variable':([10,20,],[13,28,]),'EXPRESSION':([11,],[18,]),'logical_operator':([13,],[20,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> instructions_opt','program',1,'p_program','Mparser.py',32),
  ('instructions_opt -> instructions','instructions_opt',1,'p_instructions_opt_1','Mparser.py',36),
  ('instructions_opt -> <empty>','instructions_opt',0,'p_instructions_opt_2','Mparser.py',40),
  ('instructions -> instructions instruction','instructions',2,'p_instructions_1','Mparser.py',44),
  ('instructions -> instruction','instructions',1,'p_instructions_2','Mparser.py',48),
  ('instruction -> if_statement','instruction',1,'p_instruction_1','Mparser.py',53),
  ('if_statement -> IF ( condition ) { instructions }','if_statement',7,'p_if_statement','Mparser.py',57),
  ('condition -> variable logical_operator variable','condition',3,'p_condition','Mparser.py',61),
  ('logical_operator -> EQ','logical_operator',1,'p_logical_operator','Mparser.py',65),
  ('logical_operator -> <','logical_operator',1,'p_logical_operator','Mparser.py',66),
  ('logical_operator -> >','logical_operator',1,'p_logical_operator','Mparser.py',67),
  ('logical_operator -> GE','logical_operator',1,'p_logical_operator','Mparser.py',68),
  ('logical_operator -> LE','logical_operator',1,'p_logical_operator','Mparser.py',69),
  ('variable -> INTNUM','variable',1,'p_variable','Mparser.py',73),
  ('variable -> ID','variable',1,'p_variable','Mparser.py',74),
  ('instruction -> assign','instruction',1,'p_instruction_3','Mparser.py',79),
  ('assign -> ID = INTNUM','assign',3,'p_assign_1','Mparser.py',84),
  ('assign -> ID = ID','assign',3,'p_assign_1','Mparser.py',85),
  ('assign -> ID = EXPRESSION','assign',3,'p_assign_1','Mparser.py',86),
  ('EXPRESSION -> INTNUM + INTNUM','EXPRESSION',3,'p_expression_1','Mparser.py',92),
]
